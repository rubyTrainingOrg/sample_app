require 'digest'

class User < ActiveRecord::Base
  attr_accessor :password
  attr_accessible :nom, :email, :password, :password_confirmation
  
  email_regex = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i
  
  validates :nom, :presence => true,
                  :length => { :maximum => 50 }
  validates :email, :presence => true,
                  :format => { :with => email_regex },
                  :uniqueness => { :case_sensitive => false }
  validates :password, :presence => true,
                  :confirmation => true,
                  :length => {:within => 6..40}
  before_save :encrypt_password
  
  def has_password?(password_to_test)
    encrypted_password == encrypt(password_to_test)
  end
  
  def self.authenticate(email, password)
    user = find_by_email(email)
    return nil if user.nil?
    return user if user.has_password?(password)
  end
  
  private
  
  def encrypt_password
    self.salt = make_salt if new_record?
    self.encrypted_password = encrypt(password)
  end
  
  def encrypt(string)
    secure_hash("#{salt}--#{string}")
  end
  
  def make_salt
    secure_hash("#{Time.now.utc}--#{password}")
  end
  
  def secure_hash(string)
    Digest::SHA2.hexdigest(string)
  end
              
end
#--
# generated by 'annotated-rails' gem, please do not remove this line and content below, instead use `bundle exec annotate-rails -d` command
#++
# Table name: users
#
# * id                 :integer         not null
#   nom                :string(255)
#   email              :string(255)
#   created_at         :datetime        not null
#   updated_at         :datetime        not null
#   encrypted_password :string(255)
#   salt               :string(255)
#
#  Indexes:
#   index_users_on_email  email  unique
#--
# generated by 'annotated-rails' gem, please do not remove this line and content above, instead use `bundle exec annotate-rails -d` command
#++
